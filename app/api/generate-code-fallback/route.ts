import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  console.log('使用备用代码生成方案');
  
  try {
    const body = await request.json();
    const { documentContent, options } = body;
    
    if (!documentContent) {
      return NextResponse.json(
        { error: '缺少文档内容' },
        { status: 400 }
      );
    }

    // 从文档内容中提取关键信息
    const lines = documentContent.split('\n');
    const projectTitle = lines[0] || (options?.language === 'zh' ? '生成的应用' : 'Generated App');
    
    // 查找功能列表
    const features: string[] = [];
    let inFeatureSection = false;
    for (const line of lines) {
      if (line.includes('功能') || line.includes('Features') || line.includes('包含')) {
        inFeatureSection = true;
        continue;
      }
      if (inFeatureSection && line.trim().startsWith('-')) {
        features.push(line.trim().substring(1).trim());
      }
    }

    // 生成基础代码
    const result = {
      pages: [{
        name: 'index',
        route: '/',
        html: `<!DOCTYPE html>
<html lang="${options?.language === 'zh' ? 'zh-CN' : 'en'}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${projectTitle}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <nav class="navbar">
        <div class="container">
            <h1 class="logo">${projectTitle}</h1>
            <ul class="nav-links">
                <li><a href="#home">${options?.language === 'zh' ? '首页' : 'Home'}</a></li>
                <li><a href="#features">${options?.language === 'zh' ? '功能' : 'Features'}</a></li>
                <li><a href="#about">${options?.language === 'zh' ? '关于' : 'About'}</a></li>
            </ul>
        </div>
    </nav>
    
    <main class="main-content">
        <section id="home" class="hero">
            <div class="container">
                <h2>${projectTitle}</h2>
                <p>${options?.language === 'zh' ? '基于流程图自动生成的Web应用' : 'Web application generated from flow diagram'}</p>
            </div>
        </section>
        
        <section id="features" class="features">
            <div class="container">
                <h2>${options?.language === 'zh' ? '主要功能' : 'Main Features'}</h2>
                <div class="feature-grid">
                    ${features.map((feature, index) => `
                    <div class="feature-card">
                        <h3>${options?.language === 'zh' ? `功能 ${index + 1}` : `Feature ${index + 1}`}</h3>
                        <p>${feature}</p>
                    </div>
                    `).join('')}
                </div>
            </div>
        </section>
        
        <section id="about" class="about">
            <div class="container">
                <h2>${options?.language === 'zh' ? '项目说明' : 'Project Description'}</h2>
                <div class="content">
                    <pre>${documentContent}</pre>
                </div>
            </div>
        </section>
    </main>
    
    <footer class="footer">
        <div class="container">
            <p>${options?.language === 'zh' ? '© 2025 由 IdeaCanvas 生成' : '© 2025 Generated by IdeaCanvas'}</p>
        </div>
    </footer>
    
    <script src="app.js"></script>
</body>
</html>`
      }],
      styles: [{
        name: 'styles.css',
        content: `/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --primary-color: #3b82f6;
    --secondary-color: #6b7280;
    --background: #f9fafb;
    --text-primary: #111827;
    --text-secondary: #6b7280;
    --border-color: #e5e7eb;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    color: var(--text-primary);
    background: var(--background);
    line-height: 1.6;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
}

/* Navigation */
.navbar {
    background: white;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 0;
    z-index: 100;
}

.navbar .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
}

.logo {
    font-size: 1.5rem;
    color: var(--primary-color);
}

.nav-links {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-links a {
    color: var(--text-secondary);
    text-decoration: none;
    transition: color 0.3s;
}

.nav-links a:hover {
    color: var(--primary-color);
}

/* Hero Section */
.hero {
    padding: 4rem 0;
    text-align: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.hero h2 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

/* Features Section */
.features {
    padding: 4rem 0;
}

.features h2 {
    text-align: center;
    margin-bottom: 3rem;
    font-size: 2rem;
}

.feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.feature-card {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.feature-card h3 {
    color: var(--primary-color);
    margin-bottom: 1rem;
}

/* About Section */
.about {
    padding: 4rem 0;
    background: white;
}

.about h2 {
    text-align: center;
    margin-bottom: 2rem;
}

.about .content {
    background: var(--background);
    padding: 2rem;
    border-radius: 8px;
    overflow-x: auto;
}

.about pre {
    white-space: pre-wrap;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
}

/* Footer */
.footer {
    background: var(--text-primary);
    color: white;
    text-align: center;
    padding: 2rem 0;
    margin-top: 4rem;
}`
      }],
      scripts: [{
        name: 'app.js',
        content: `// Generated JavaScript
console.log('App initialized');

// Smooth scrolling for navigation links
document.addEventListener('DOMContentLoaded', function() {
    const links = document.querySelectorAll('a[href^="#"]');
    
    links.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetSection = document.querySelector(targetId);
            
            if (targetSection) {
                targetSection.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
    
    // Add active class to navigation
    const sections = document.querySelectorAll('section');
    const navLinks = document.querySelectorAll('.nav-links a');
    
    window.addEventListener('scroll', () => {
        let current = '';
        
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            if (pageYOffset >= (sectionTop - 200)) {
                current = section.getAttribute('id');
            }
        });
        
        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href').slice(1) === current) {
                link.classList.add('active');
            }
        });
    });
});`
      }],
      apiEndpoints: []
    };
    
    return NextResponse.json(result);
  } catch (error: any) {
    console.error('Fallback generation error:', error);
    return NextResponse.json(
      { error: error.message || '代码生成失败' },
      { status: 500 }
    );
  }
}